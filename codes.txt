bg-gradient-to-r from-slate-500 to-slate-800





thanks, i need to add a progress steps to show to the client, but i will put it in another component. in the Home component i have a button (get started) to come to the Upload page. with this event I need to change the mode of progress steps (located in Progress component). also when user upload the dataset and click on the Analyze button, the state of the progress steps change again and again. let me give you the components: 
Home==
import React from 'react';
import { Link } from "react-router-dom";
import { IoDocumentTextOutline } from "react-icons/io5";

const Home = () => {
    return (
        <div className='w-4/5'>
            <div className='w-full flex flex-col p-7 items-center justify-centent m-auto'>
                <h1 className='text-6xl mt-52 text-white font-bold '> Faireness in AI</h1>

                <p className='text-xl m-5 text-white'>Preprocess data, select modeling techniques, and apply fairness
                    metrics to analyze and mitigate bias.
                </p>

                <div className='flex mt-7'>
                    <Link to="/document">
                        <button type="button" class="text-white flex hover:text-white border border-white hover:bg-black focus:ring-4 focus:outline-none focus:ring-black font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2 dark:border-black dark:text-black dark:hover:text-white dark:hover:bg-black dark:focus:ring-black">
                            <IoDocumentTextOutline className='mr-2' />
                            Read the Document
                        </button>
                    </Link>
                    <Link to="/upload">
                        <button type="button" class="text-green-500 flex hover:text-green-500 border border-green-500 hover:bg-black focus:ring-4 focus:outline-none focus:ring-black font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2 dark:border-black dark:text-black dark:hover:text-white dark:hover:bg-black dark:focus:ring-black">
                            Get Started<svg class="rtl:rotate-180 w-3.5 h-3.5 ms-2" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
                                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9" />
                            </svg>
                        </button>
                    </Link>
                </div>

            </div>
        </div>
    )
}

export default Home

Progress==
import React from 'react'

const Progress = () => {
    return (
        <div className="space-y-4 mt-9">
            <h1>Progress Steps:</h1>
            <ol className="space-y-3 text-sm">
                <li>
                    <div className="p-2 text-green-700 border border-green-300 rounded-lg bg-green-50 dark:bg-gray-800 dark:border-green-800 dark:text-green-400" role="alert">
                        <div className="flex items-center justify-between">
                            <span className="sr-only">User info</span>
                            <h3 className="font-medium">1. User info</h3>
                            <svg className="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 12">
                                <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M1 5.917 5.724 10.5 15 1.5" />
                            </svg>
                        </div>
                    </div>
                </li>
                <li>
                    <div className="p-2 text-green-700 border border-green-300 rounded-lg bg-green-50 dark:bg-gray-800 dark:border-green-800 dark:text-green-400" role="alert">
                        <div className="flex items-center justify-between">
                            <span className="sr-only">Account info</span>
                            <h3 className="font-medium">2. Account info</h3>
                            <svg className="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 12">
                                <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M1 5.917 5.724 10.5 15 1.5" />
                            </svg>
                        </div>
                    </div>
                </li>
                <li>
                    <div className="p-2 text-blue-700 bg-blue-100 border border-blue-300 rounded-lg dark:bg-gray-800 dark:border-blue-800 dark:text-blue-400" role="alert">
                        <div className="flex items-center justify-between">
                            <span className="sr-only">Social accounts</span>
                            <h3 className="font-medium">3. Social accounts</h3>
                            <svg className="rtl:rotate-180 w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
                                <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M1 5h12m0 0L9 1m4 4L9 9" />
                            </svg>
                        </div>
                    </div>
                </li>
                <li>
                    <div className="p-2 text-gray-900 bg-gray-100 border border-gray-300 rounded-lg dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400" role="alert">
                        <div className="flex items-center justify-between">
                            <span className="sr-only">Review</span>
                            <h3 className="font-medium">4. Review</h3>
                        </div>
                    </div>
                </li>
                <li>
                    <div className="p-2 text-gray-900 bg-gray-100 border border-gray-300 rounded-lg dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400" role="alert">
                        <div className="flex items-center justify-between">
                            <span className="sr-only">Confirmation</span>
                            <h3 className="font-medium">5. Confirmation</h3>
                        </div>
                    </div>
                </li>
            </ol>
        </div>
    )
}

export default Progress

Upload==
import React, { useState } from 'react';
import axios from 'axios';
import ContinueMessage from './ContinueMessage';

const Upload = () => {
    const [datasetFile, setDatasetFile] = useState(null);
    const [labelColumn, setLabelColumn] = useState('');
    const [sensitiveColumn, setSensitiveColumn] = useState('');
    const [metricType, setMetricType] = useState('demographic_parity');
    const [fileName, setFileName] = useState('');
    const [errorMessage, setErrorMessage] = useState('');
    const [contineMessage, setContineMessage] = useState('');


    // Handle file input change
    const handleFileChange = (e) => {
        const selectedFile = e.target.files[0];

        if (selectedFile) {
            const allowedFormats = ["csv", "json", "xls", "xlsx"]; // Allowed file extensions
            const fileExtension = selectedFile.name.split('.').pop().toLowerCase(); // Extract file extension

            if (!allowedFormats.includes(fileExtension)) {
                setErrorMessage(`${fileExtension} is an Invalid file format. Please upload a file in one of the following formats: ${allowedFormats.join(", ")}`);
                setDatasetFile(null); // Reset the dataset file state
                setFileName(""); // Clear the file name display
                setContineMessage("");
                return;
            }

            // If valid, clear error and set the file
            setErrorMessage(''); // Clear any previous error messages
            setDatasetFile(selectedFile);
            setFileName(selectedFile.name);
            setContineMessage(<ContinueMessage />);
        }
    };


    // Handle delete action
    const handleDelete = () => {
        setDatasetFile(null);
        setFileName('');
    };

    // Handle form submission
    const handleSubmit = async (e) => {
        e.preventDefault();

        // Ensure a file is selected
        if (!datasetFile) {
            setErrorMessage("Please upload a dataset file.");
            return;
        }

        // Prepare form data
        const formData = new FormData();
        formData.append("dataset", datasetFile);
        formData.append("label_column", labelColumn);
        formData.append("sensitive_column", sensitiveColumn);
        formData.append("metric_type", metricType);

        try {
            // Send POST request to the backend
            const response = await axios.post("http://localhost:5000/upload", formData, {
                headers: { "Content-Type": "multipart/form-data" },
            });
            setErrorMessage(''); // Clear any previous error messages
            alert("Fairness Score: " + response.data.fairness_score);
        } catch (error) {
            console.error("There was an error uploading the file!", error);
            setErrorMessage("Error in uploading dataset or processing request.");
        }
    };

    return (
        <form onSubmit={handleSubmit} className="flex flex-wrap justify-between p-4 w-4/5">

            <div className='w-full md:w-2/3 p-2'>
                <label className="flex flex-col items-center justify-center h-64 border-2 border-gray-200 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-gray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500">
                    <div className="flex flex-col items-center justify-center pt-5 pb-6">
                        {/* Conditionally render elements based on datasetFile state */}
                        {!datasetFile && (
                            <>
                                <p>Load the Dataset</p>
                                <br />
                                <svg className="w-8 h-8 mb-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
                                    <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2" />
                                </svg>
                                <p className="mb-7 text-sm text-gray-500 dark:text-gray-400">
                                    <span className="font-semibold">Click to upload</span> or drag and drop
                                </p>
                            </>
                        )}

                        {fileName && (
                            <p className="text-base text-gray-700">Selected File: {fileName}</p>
                        )}

                        {errorMessage && (
                            <p className="mt-2 text-sm text-red-600">
                                {errorMessage}
                            </p>
                        )}

                        {contineMessage && (
                            <p>
                                {contineMessage}
                            </p>
                        )}

                        {/* Show delete button if a file is loaded */}
                        {datasetFile && (
                            <>
                                <p></p>
                                <button
                                    onClick={handleDelete}
                                    className="mt-16 px-4 py-2 bg-red-500 text-white rounded"
                                >
                                    Delete
                                </button>
                            </>
                        )}
                    </div>
                    <input
                        id="dropzone-file"
                        type="file"
                        className="hidden"
                        onChange={handleFileChange}
                    />
                </label>
            </div>

            <div className="w-full md:w-1/3 p-2">
                <div className="w-full px-3 mb-5">
                    <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-1" for="grid-city">
                        Label Column:
                    </label>
                    <input className="appearance-none block w-full bg-gray-50 text-gray-700 border border-gray-200 rounded py-1 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" id="" type="text" value={labelColumn} onChange={(e) => setLabelColumn(e.target.value)} />
                </div>
                <div className="w-full px-3 mb-5">
                    <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-1" for="grid-state">
                        Fairness Metric:
                    </label>
                    <div className="relative">
                        <select className="block appearance-none w-full bg-gray-50 border border-gray-200 text-gray-700 py-1 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                            id=""
                            value={metricType}
                            onChange={(e) => setMetricType(e.target.value)}>
                            <option>Demographic Parity</option>
                            <option>Equalized Odds</option>
                        </select>
                        <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                            <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" /></svg>
                        </div>
                    </div>
                </div>
                <div className="w-full px-3 mb-2">
                    <label className="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-1" for="grid-zip">
                        Sensitive Column:
                    </label>
                    <input className="appearance-none block w-full bg-gray-50 text-gray-700 border border-gray-200 rounded py-1 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" id="" type="text" value={sensitiveColumn} onChange={(e) => setSensitiveColumn(e.target.value)} />
                </div>
                <div className="w-full px-3 mb-2">
                    <button type="submit" className="mt-4 bg-gray-700 text-white rounded-md py-2 px-4 hover:bg-blue-700">
                        Analyze
                    </button>
                </div>
            </div>
        </form>
    );
};

export default Upload;






























how can i add this spinners (<BeatLoader />) front of the current step in the progress steps li value?
import React, { useContext } from "react";
import { ProgressContext } from "../ProgressContext";
import BeatLoader from "react-spinners/BeatLoader";

const Progress = () => {
    const { progress } = useContext(ProgressContext); // Access progress from Context

    const steps = ["Get Started", "Dataset Uploaded", "Analysis Completed", "Review", "Confirmation"];

    return (
        <div className="space-y-4 mt-9">
            <h1>Progress Steps:</h1>
            <ol className="space-y-3 text-sm">
                {steps.map((step, index) => (
                    <li key={index}>
                        <div
                            className={`p-2 border rounded-lg ${index + 1 === progress
                                ? "text-blue-700 bg-blue-100 border-blue-300"
                                : index + 1 < progress
                                    ? "text-green-700 bg-green-50 border-green-300"
                                    : "text-gray-900 bg-gray-100 border-gray-300"
                                }`}
                            role="alert"
                        >
                            <div className="flex items-center justify-between">
                                <h3 className="font-medium">
                                    {index + 1}. {step}
                                </h3>
                                {index + 1 < progress && (
                                    <svg
                                        className="w-4 h-4"
                                        xmlns="http://www.w3.org/2000/svg"
                                        fill="none"
                                        viewBox="0 0 16 12"
                                    >
                                        <path
                                            stroke="currentColor"
                                            strokeLinecap="round"
                                            strokeLinejoin="round"
                                            strokeWidth="2"
                                            d="M1 5.917 5.724 10.5 15 1.5"
                                        />
                                    </svg>
                                )}
                            </div>
                        </div>
                    </li>
                ))}
            </ol>
        </div>
    );
};

export default Progress;









<font style="vertical-align: inherit;"><font style="vertical-align: inherit;">
												Multi-Year Seasonal Communication
											</font></font>